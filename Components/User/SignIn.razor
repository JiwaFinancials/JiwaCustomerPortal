@page "/User/SignIn"
@attribute [type: RenderModeInteractiveServer]
@using System.ComponentModel.DataAnnotations
@using ServiceStack;

@inject ILogger<SignIn> Logger
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject WebPortalUserSessionStateContainer WebPortalUserSessionStateContainer

<PageTitle>Sign in</PageTitle>

<h1>Sign in</h1>
<div class="row">
    <div class="col-md-4">
        @if (APIRequestInPogress)
        {
            <div class="modal fade show" id="myModal" style="display:inline-flex" aria-modal="true" role="dialog">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content border-0">
                        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        }
        <section>
            <StatusMessage Message="@errorMessage" />

            @if (hasMultipleUserIdentitiesWithEmailAddress)
            {
                <JiwaAPIAutoQueryGrid Model="JiwaFinancials.Jiwa.JiwaServiceModel.Tables.v_Jiwa_DB_ContactNameMultiple"
                                      QueryType="JiwaFinancials.Jiwa.JiwaServiceModel.Tables.v_Jiwa_DB_ContactNameMultipleQuery" 
                                      AutoQuery="@DebtorContactNameMultipleAutoQuery"
                                      ShowPageNavigationHeader="false"
                                      HiddenColumns=@(new List<String> {"RecID"})
                                      CaptionMaps=@(new Dictionary<string, string> { ["Name"] = "Company", ["FirstName"] = "First Name"} )
                                      AddSelectButtonColumn="true"
                                      ItemSelectedCallbackMethod="@ItemSelected"
                                      AuthType="AuthTypes.JiwaAPIKey"
                                      APIExceptionCallbackMethod="@APIException">
                </JiwaAPIAutoQueryGrid>
            }

            <EditForm Model="Input" method="post" OnValidSubmit="SignInUser" FormName="signin">
                <DataAnnotationsValidator />                
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Sign in</button>
                </div>
                <div>
                    <p>
                        <a href="User/ForgotPassword">Forgot your password?</a>
                    </p>                    
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool APIRequestInPogress;
    private bool hasMultipleUserIdentitiesWithEmailAddress;
    private JiwaFinancials.Jiwa.JiwaServiceModel.Tables.v_Jiwa_DB_ContactNameMultipleQuery DebtorContactNameMultipleAutoQuery;
    private JiwaFinancials.Jiwa.JiwaServiceModel.Tables.v_Jiwa_DB_ContactNameMultiple selectedContact { get; set; }    

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        DebtorContactNameMultipleAutoQuery = new JiwaFinancials.Jiwa.JiwaServiceModel.Tables.v_Jiwa_DB_ContactNameMultipleQuery()
            {
                OrderBy = "Name",                
                Fields = "RecID,Name,FirstName,Surname",
                Take = 10
            };
    }

    public async Task SignInUser()
    {
        errorMessage = null;

        if (hasMultipleUserIdentitiesWithEmailAddress && selectedContact == null)
        {
            errorMessage = "You must select which user identity you are authenticating with.";
            return;
        }

        ServiceStack.Authenticate authRequest = new ServiceStack.Authenticate();

        if (!hasMultipleUserIdentitiesWithEmailAddress)
        {
            authRequest = new ServiceStack.Authenticate() { UserName = Input.Email, Password = Input.Password, provider = "debtorcontactnameemailaddresscredentials", RememberMe = Input.RememberMe };
        }
        else
        {
            authRequest = new ServiceStack.Authenticate() { UserName = selectedContact.RecID, Password = Input.Password, provider = "debtorcontactnameidcredentials", RememberMe = Input.RememberMe };
        }

        ServiceStack.AuthenticateResponse? authResponse = null;

        bool oldAPIRequestInPogress = APIRequestInPogress;
        APIRequestInPogress = true;

        try
        {
            authResponse = await JiwaAPI.GetAsync(authRequest);            
        }
        catch (ServiceStack.WebServiceException webServiceException)
        {
            if (webServiceException.ErrorCode == "BadLoginMultipleMatchesException")
            {
                // need to get user to tell us which debtor contact name identity they are signing in as, as multiple debtor contacts has the supplied email address.
                DebtorContactNameMultipleAutoQuery.EmailAddress = Input.Email;
                errorMessage = "Multiple users are registered with that email address. Select which user to authenticate with.";
                hasMultipleUserIdentitiesWithEmailAddress = true;                
                return;
            }
            else if (webServiceException.Message.Contains("Invalid salt"))
            {
                errorMessage = "The user identity associated with that email address does not appear to have a password set. You should use the forgot password function to reset it.";
                return;
            }
            else
            {
                errorMessage = webServiceException.Message;
                return;
            }
        }        
        catch (Exception ex)
        {
            hasMultipleUserIdentitiesWithEmailAddress = false;

            if (ex.Message.StartsWith("No connection could be made because the target machine actively refused it."))
            {
                errorMessage = $"Could not reach the configured JiwaAPIURL of '{Config.JiwaAPIURL}' {ex.Message}.  Check the URL is correct in appsettings.json, and also verify that '{Config.JiwaAPIURL}' is able to accept requests from this machine.";
                return;
            }
            else
            {
                errorMessage = ex.Message;
                return;
            }
        }
        finally
        {
            APIRequestInPogress = oldAPIRequestInPogress;
        }

        if (authResponse?.SessionId == null)
        {
            errorMessage = "Authentication failed.";
            return;
        }

        oldAPIRequestInPogress = APIRequestInPogress;
        APIRequestInPogress = true;
        try
        {
            JiwaFinancials.Jiwa.JiwaServiceModel.JiwaAuthUserSessionResponse jiwaAuthUserSession = await JiwaAPI.GetAsync(new JiwaFinancials.Jiwa.JiwaServiceModel.AuthCurrentSessionGETRequest(), jiwaAPISessionId: authResponse.SessionId);
            JiwaFinancials.Jiwa.JiwaServiceModel.WebPortalUserSession webPortalUserSession = jiwaAuthUserSession.ConvertTo<JiwaFinancials.Jiwa.JiwaServiceModel.WebPortalUserSession>();

            JiwaFinancials.Jiwa.JiwaServiceModel.DebtorContactNameCustomerWebPortalRoleGETResponse debtorContactNameCustomerWebPortalRoleGETResponse = await JiwaAPI.GetAsync(new JiwaFinancials.Jiwa.JiwaServiceModel.DebtorContactNameCustomerWebPortalRoleGETRequest(), jiwaAPISessionId: authResponse.SessionId);

            if (debtorContactNameCustomerWebPortalRoleGETResponse.Roles == null || (!debtorContactNameCustomerWebPortalRoleGETResponse.Roles.Contains("User") && !debtorContactNameCustomerWebPortalRoleGETResponse.Roles.Contains("Admin")))
            {
                // no web portal role has been assigned to this debtor contact name; they are not allowed to sign in.
                throw new Exception("User does not have permission to sign in using the Customer Web Portal. Add the tag 'Customer Web Portal - User' or 'Customer Web Portal - Admin' to the debtor contact name");
            }

            webPortalUserSession.IsAdminRole = debtorContactNameCustomerWebPortalRoleGETResponse.Roles.Contains("Admin");
            await ProtectedLocalStore.SetAsync("JiwaCustomerWebPortalAuthUserSession", webPortalUserSession);                   
            WebPortalUserSessionStateContainer.SetWebPortalUserSession(webPortalUserSession);
            selectedContact = null;
            hasMultipleUserIdentitiesWithEmailAddress = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            return;
        }
        finally
        {
            APIRequestInPogress = oldAPIRequestInPogress;
        }

        // We want to redirect to where this came from, if we were redirected to here from somewhere else
        if (ReturnUrl != null)
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }        
    }

    public void ItemSelected(JiwaFinancials.Jiwa.JiwaServiceModel.Tables.v_Jiwa_DB_ContactNameMultiple item)
    {
        selectedContact = item;
    }

    public void APIException(Exception ex)
    {
        // just set the errorMessage property - the StatusMessage component will display it.
        errorMessage = ex.Message;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
