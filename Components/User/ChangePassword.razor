@page "/User/ChangePassword"
@attribute [type: RenderModeInteractiveServer]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager NavigationManager
@inject WebPortalUserSessionStateContainer WebPortalUserSessionStateContainer

<PageTitle>Change password</PageTitle>
<h1>Change password</h1>
<div class="row">
    @if (APIRequestInPogress)
    {
        <div class="modal fade show" id="myModal" style="display:inline-flex" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content border-0">
                    <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="col-md-4">
        <section>
            <StatusMessage Message="@statusMessage" />
            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="SetPassword" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.CurrentPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your current password." />
                    <label for="currentpassword" class="form-label">Current Password</label>
                    <ValidationMessage For="() => Input.CurrentPassword" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                    <label for="confirm-password" class="form-label">Confirm password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
            </EditForm>
        </section>
    </div>
</div>


@code {
    [Parameter]
    public required string token { get; set; }
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? statusMessage;
    private bool APIRequestInPogress;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (WebPortalUserSessionStateContainer.ProtectedLocalStore == null)
        {
            try
            {
                await WebPortalUserSessionStateContainer.SetProtectedLocalStore(ProtectedLocalStore);
            }
            catch (Exception ex)
            {
                statusMessage = ex.Message;
                return;
            }
        }

        if (WebPortalUserSessionStateContainer.WebPortalUserSession == null)
        {
            // not authenticated
            NavigationManager.NavigateTo($"User/SignIn?returnUrl={NavigationManager.Uri}");
            return;
        }
    }

    public async void SetPassword()
    {
        bool oldAPIRequestInPogress = APIRequestInPogress;
        APIRequestInPogress = true;

        try
        {
            JiwaFinancials.Jiwa.JiwaServiceModel.DebtorContactNamePATCHRequest changePasswordRequest = new JiwaFinancials.Jiwa.JiwaServiceModel.DebtorContactNamePATCHRequest();
            changePasswordRequest.DebtorID = WebPortalUserSessionStateContainer.WebPortalUserSession.DebtorID;
            changePasswordRequest.ContactNameID = WebPortalUserSessionStateContainer.WebPortalUserSession.DebtorContactNameID;
            changePasswordRequest.NewCustomerWebPortalPassword = Input.Password;
            changePasswordRequest.CurrentCustomerWebPortalPassword = Input.CurrentPassword;
            JiwaFinancials.Jiwa.JiwaServiceModel.Debtors.DebtorContactName response = await JiwaAPI.PatchAsync(changePasswordRequest, jiwaAPISessionId: WebPortalUserSessionStateContainer.WebPortalUserSession.Id);

            NavigationManager.NavigateTo("/User/ChangePasswordConfirmation");
        }
        catch (Exception ex)
        {
            statusMessage = ex.Message;
            APIRequestInPogress = oldAPIRequestInPogress;
            StateHasChanged();
        }
        finally
        {
            APIRequestInPogress = oldAPIRequestInPogress;
        }
    }

    private sealed class InputModel
    {
        [Required]        
        [DataType(DataType.Password)]
        public string CurrentPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

