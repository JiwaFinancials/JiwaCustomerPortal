@page "/User/PasswordReset/{token}"
@attribute [type: RenderModeInteractiveServer]
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<PageTitle>Reset password</PageTitle>

<h1>Reset password</h1>

<div class="row">
    @if (APIRequestInPogress)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="ChangePassword" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                    <label for="confirm-password" class="form-label">Confirm password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
            </EditForm>
        </section>
    </div>
</div>


@code {
    [Parameter]
    public required string token { get; set; }
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? errorMessage;
    private bool APIRequestInPogress;

    public async void ChangePassword()
    {
        bool oldAPIRequestInPogress = APIRequestInPogress;
        APIRequestInPogress = true;

        try
        {
            JiwaFinancials.Jiwa.JiwaServiceModel.DebtorContactNameTokenisedChangePasswordPOSTRequest changePasswordRequest = new JiwaFinancials.Jiwa.JiwaServiceModel.DebtorContactNameTokenisedChangePasswordPOSTRequest();
            changePasswordRequest.Token = token;
            changePasswordRequest.NewPassword = Input.Password;            
            ServiceStack.IReturnVoid response = await JiwaAPI.PostAsync<ServiceStack.IReturnVoid>(changePasswordRequest, jiwaAPIKey: Config.JiwaAPIKey);

            NavigationManager.NavigateTo("/User/ChangePasswordConfirmation");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            APIRequestInPogress = oldAPIRequestInPogress;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}

