@attribute [type: RenderModeInteractiveServer]
﻿@using Microsoft.AspNetCore.Components.Forms
@using JiwaCustomerPortal.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ServiceStack;
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject WebPortalUserSessionStateContainer WebPortalUserSessionStateContainer

<!-- We don't use and EditForm here because we don't want to have to decorate our DTO (DebtorContactName) with validation attributes - we want to keep
    then standard DTO's as generated by the API.  We *could* create a new class inheriting from DebtorContactName and decorate the properties with the validation
    attributes there, but that would mean a a bunch of complexity when we don't need it.  We'll just validate ourselves the long, boring (but obvious) way.
-->
<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">                        
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@ModalCancel"></button>
            </div>            

            <div class="modal-body">                
                <div class="row">
                    <div class="col-2">
                        <label for="Title" class="form-label">Title</label>
                        <input type="text" class="form-control" id="Title" @bind="ContactName.Title">
                    </div>
                    <div class="col-5">
                        <label for="FirstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="FirstName" @bind="ContactName.FirstName">
                    </div>
                    <div class="col-5">
                        <label for="Surname" class="form-label">Surname</label>
                        <input type="text" class="form-control" id="Surname" @bind="ContactName.Surname">
                    </div>
                </div>

                <p></p>

                <div class="row">
                    <div class="col-4">
                        <label for="Phone" class="form-label">Phone</label>
                        <input type="text" class="form-control" id="Phone" @bind="ContactName.Mobile">
                    </div>
                    
                    <p></p>
                    
                    <div class="col-9">                        
                        <label for="Email" class="form-label">Email</label>
                        <input type="text" class="form-control" id="Email" @bind="ContactName.EmailAddress">
                    </div>
                </div>

                <p></p>

                <h4>Tags</h4>
                <div class="p-3 p-md-4 border rounded-3">
                    <div class="col-3">
                        @foreach (JiwaFinancials.Jiwa.JiwaServiceModel.Tags.Tag tag in ContactName.TagMemberships)
                        {
                            <span class="badge rounded-pill bg-primary">
                                
                                <button @onclick="_ => RemoveTag(tag)" class="btn" style="background-color:transparent">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 20 20">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                                    </svg>
                                </button>
                                @tag.Text
                            </span>
                            <p></p>                            
                        }
                    </div>
                    <label>
                        Add a tag:
                        <select @onchange="SelectedTagChange" class="form-select form-select-lg mb-3">
                            <option value="@SelectedTag?.RecID">Select a tag</option>
                            @foreach (JiwaFinancials.Jiwa.JiwaServiceModel.Tags.Tag tag in Tags.Where(x => !ContactName.TagMemberships.Any(y => y.RecID == x.RecID)))
                            {
                                <option value="@tag.RecID">@tag.Text</option>
                            }
                        </select>
                    </label>

                    <p></p>

                    <button @onclick="(() => AddSelectedTag())" type="button" class="btn btn-success">
                        Add Selected Tag
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                        </svg>
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick=@ModalCancel>Cancel</button>
                <button type="button" class="btn btn-success" @onclick=@ModalOk>OK</button>
            </div>
            <StatusMessage Message="@statusMessage" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public JiwaFinancials.Jiwa.JiwaServiceModel.Debtors.DebtorContactName ContactName { get; set; }

    [Parameter]
    public EventCallback<JiwaFinancials.Jiwa.JiwaServiceModel.Debtors.DebtorContactName> OnClose { get; set; }

    private string? statusMessage;    
    private List<JiwaFinancials.Jiwa.JiwaServiceModel.Tags.Tag> Tags { get; set; } = new List<JiwaFinancials.Jiwa.JiwaServiceModel.Tags.Tag>();
    private JiwaFinancials.Jiwa.JiwaServiceModel.Tags.Tag SelectedTag { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (WebPortalUserSessionStateContainer.WebPortalUserSession == null)
        {
            // not authenticated ?
            NavigationManager.NavigateTo($"User/SignIn?returnUrl={NavigationManager.Uri}");
            return;
        }        

        await ReadTags();
    }

    private async Task ReadTags()
    {        
        try
        {
            List<JiwaFinancials.Jiwa.JiwaServiceModel.Debtors.DebtorContactNameTag> debtorContactNameTags = await JiwaAPI.GetAsync(new JiwaFinancials.Jiwa.JiwaServiceModel.DebtorContactNameTagGETManyRequest(), WebPortalUserSessionStateContainer.WebPortalUserSession.Id, null);
            foreach (JiwaFinancials.Jiwa.JiwaServiceModel.Debtors.DebtorContactNameTag debtorContactNameTag in debtorContactNameTags.OrderBy(x => x.Text))
            {
                Tags.Add(new JiwaFinancials.Jiwa.JiwaServiceModel.Tags.Tag() { RecID = debtorContactNameTag.RecID, Text = debtorContactNameTag.Text } );
            }

        }
        catch (Exception ex)
        {
            statusMessage = ex.Message;
        }
    }

    private async void SelectedTagChange(ChangeEventArgs e)
    {
        SelectedTag = Tags.FirstOrDefault(x => x.RecID == e.Value.ToString());
    }

    private async void AddSelectedTag()
    {        
        if (SelectedTag != null)
        {
            if (ContactName.TagMemberships.FirstOrDefault(x => x.RecID == SelectedTag.RecID) == null)
            {
                ContactName.TagMemberships.Add(SelectedTag);
                // Make the selected tag now the next tag in the list of tags not already selected.
                // This lets the user just blindly press the add button repeatedly, adding tags without having to move the mouse to re-select an item in the drop-down
                SelectedTag = Tags.Where(x => ! ContactName.TagMemberships.Any(y => y.RecID == x.RecID) && string.Compare(x.Text, SelectedTag.Text) == 1).FirstOrDefault();                
            }
        }
    }

    private async void RemoveTag(JiwaFinancials.Jiwa.JiwaServiceModel.Tags.Tag tag)
    {
        ContactName.TagMemberships.Remove(tag);
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(null);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(ContactName);
    }
}
