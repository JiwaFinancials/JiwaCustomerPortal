@page "/Licences"
@attribute [type: RenderModeInteractiveServer]
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ServiceStack;
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager NavigationManager
@inject WebPortalUserSessionStateContainer WebPortalUserSessionStateContainer
@inject BrowserService BrowserService
@inject IJSRuntime JS

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = fileName ?? '';
      anchorElement.click();
      anchorElement.remove();
      URL.revokeObjectURL(url);
    }
</script>

<PageTitle>Licences</PageTitle>
@if (APIRequestInPogress)
{
    <div class="modal fade show" id="myModal" style="display:inline-flex" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0">
                <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    </div>
}

<StatusMessage Message="@statusMessage" />

<div class="d-grid gap-3">

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Licencees</h5>
            <div class="table-responsive">
                <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th class="text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-expand" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8M7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10" />
                            </svg>
                        </th>
                        <th>Customer Name</th>
                        <th class="text-end">CALs</th>
                        <th class="text-center">Currently Maintained</th>
                        <th class="text-end">Licence Expiration</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (CustomerName customerName in customerNames)
                    {
                        <tr>
                            <td class="text-center">
                                <button @onclick="(() => ToggleViewLicences(customerName))" type="button" class="btn btn-success">
                                    @if(customerName.isExpanded)
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-collapse" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8m7-8a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 4.293V.5A.5.5 0 0 1 8 0m-.5 11.707-1.146 1.147a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 11.707V15.5a.5.5 0 0 1-1 0z" />
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-expand" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8M7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10" />
                                        </svg>
                                    }
                                </button>
                            </td>

                            <td class="align-middle" @onclick=" (()=> ToggleViewLicences(customerName))"><h6>@customerName.Name</h6></td>
                            <td class="text-end align-middle">@customerName.CALs</td>
                            @if (customerName.IsMaintained)
                            {
                                @if ((customerName.LicenceExpiration - DateTime.Now).Days < 30)
                                {
                                    @if ((customerName.LicenceExpiration - DateTime.Now).Days < 0)
                                    {
                                        <td class="text-center align-middle"><span class="badge bg-danger">Yes</span></td>
                                    }
                                    else
                                    {
                                        <td class="text-center align-middle"><span class="badge bg-warning">Yes</span></td>
                                    }
                                }
                                else
                                {
                                    <td class="text-center align-middle"><span class="badge bg-success">Yes</span></td>
                                }
                            }
                            else
                            {
                                <td class="text-center align-middle"><span class="badge bg-danger">No</span></td>
                            }

                            @if ((customerName.LicenceExpiration - DateTime.Now).Days < 30)
                            {
                                @if ((customerName.LicenceExpiration - DateTime.Now).Days < 0)
                                {
                                    <td class="text-end align-middle"><span class="badge bg-danger">@customerName.LicenceExpiration.ToString(@BrowserService.DateFormat)</span></td>
                                }
                                else
                                {
                                    <td class="text-end align-middle"><span class="badge bg-warning">@customerName.LicenceExpiration.ToString(@BrowserService.DateFormat)</span></td>
                                }
                            }
                            else
                            {
                                <td class="text-end align-middle"><span class="badge bg-success">@customerName.LicenceExpiration.ToString(@BrowserService.DateFormat)</span></td>
                            }                            
                        </tr>
                        if (customerName.isExpanded && customerName.RegistrationLicences != null)
                        {
                            <tr>
                                <td></td>
                                <td colspan="4">
                                    <h5>Licences</h5>
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-striped">
                                        <thead>
                                            <tr>
                                                <th>Registered Name</th>
                                                <th>Resource Name</th>
                                                <th class="text-end">Version</th>
                                                <th class="text-end">Issue Date</th>
                                                <th class="text-end">Commence Date</th>
                                                <th class="text-end">Expiry Date</th>
                                                <th>Licence Type</th>
                                                <th class="text-end">CALs</th>
                                                <th>Username</th>
                                                <th class="text-center">Download</th>
                                            </tr>
                                        </thead>

                                        <tbody>
                                            @{
                                                string previousRegistrationName = null;
                                            }
                                            @foreach (RegistrationLicences licence in customerName.RegistrationLicences)
                                            {
                                                if (previousRegistrationName == null || previousRegistrationName != licence.RegistrationName)
                                                {
                                                    <tr>
                                                        <td colspan="10">
                                                            <span class="badge bg-primary">@licence.RegistrationName</span>
                                                        </td>
                                                    </tr>
                                                }
                                                <tr>
                                                    <td class="align-middle">@licence.RegistrationName</td>
                                                    <td class="align-middle">@licence.ResourceName</td>
                                                    <td class="text-end align-middle">@licence.Version</td>
                                                    <td class="text-end align-middle">@licence.IssueDate.ToString(@BrowserService.DateFormat)</td>
                                                    <td class="text-end align-middle">@licence.CommenceDate.ToString(@BrowserService.DateFormat)</td>

                                                    @if ((licence.ExpiryDate - DateTime.Now).Days < 30)
                                                    {
                                                        if ((licence.ExpiryDate - DateTime.Now).Days < 0)
                                                        {
                                                            <td class="text-end align-middle"><span class="badge bg-danger">@licence.ExpiryDate.ToString(@BrowserService.DateFormat)</span></td>
                                                        }
                                                        else
                                                        {
                                                            <td class="text-end align-middle"><span class="badge bg-warning bg-subtle">@licence.ExpiryDate.ToString(@BrowserService.DateFormat)</span></td>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <td class="text-end align-middle"><span class="badge bg-success">@licence.ExpiryDate.ToString(@BrowserService.DateFormat)</span></td>
                                                    }

                                                    <td class="align-middle">@(licence.LicenceType == 0 ? "Pooled" : "Named")</td>
                                                    <td class="text-end align-middle">@licence.CALs</td>
                                                    <td class="align-middle">@licence.UserName</td>
                                                    <td class="text-center">
                                                        <button @onclick="(() => DownloadLicence(licence))" type="button" class="btn btn-success">
                                                            Download
                                                        </button>
                                                    </td>
                                                </tr>

                                                previousRegistrationName = licence.RegistrationName;
                                            }
                                        </tbody>
                                    </table>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            </div>
        </div>
    </div>

</div>

@code{
    private bool APIRequestInPogress;
    private string? statusMessage;
    private List<CustomerName> customerNames { get; set; } = new List<CustomerName>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (WebPortalUserSessionStateContainer.ProtectedLocalStore == null)
        {
            try
            {
                await WebPortalUserSessionStateContainer.SetProtectedLocalStore(ProtectedLocalStore);
            }
            catch (Exception ex)
            {
                statusMessage = ex.Message;
                return;
            }
        }

        if (WebPortalUserSessionStateContainer.WebPortalUserSession == null)
        {
            // not authenticated
            NavigationManager.NavigateTo($"User/SignIn?returnUrl={NavigationManager.Uri}");
            return;
        }

        LicensedCustomerNamesGETRequest licensedCustomerNamesGETRequest = new LicensedCustomerNamesGETRequest();

        bool oldAPIRequestInPogress = APIRequestInPogress;
        try
        {
            APIRequestInPogress = true;
            customerNames = await JiwaAPI.GetAsync(licensedCustomerNamesGETRequest, WebPortalUserSessionStateContainer?.WebPortalUserSession?.Id, null);
        }
        catch (ServiceStack.WebServiceException webServiceException)
        {
            if (webServiceException.StatusCode == 401)
            {
                // We are either not authenticated, or our token we have expired, go log on - but first clear any session info as it's no good no more.
                WebPortalUserSessionStateContainer.SetWebPortalUserSession(null);
                NavigationManager.NavigateTo($"User/SignIn?returnUrl={NavigationManager.Uri}");
            }
            else
            {
                statusMessage = webServiceException.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            statusMessage = ex.Message;
        }
        finally
        {
            APIRequestInPogress = oldAPIRequestInPogress;
        }
    }    

    private async void ToggleViewLicences(CustomerName customerName)
    {
        customerName.isExpanded = !customerName.isExpanded;

        if (customerName.isExpanded && customerName.LicencesHaveBeenRead == false)
        {
            CustomerLicencesGETRequest customerLicencesGETRequest = new CustomerLicencesGETRequest() { DebtorID = customerName.DebtorID };

            bool oldAPIRequestInPogress = APIRequestInPogress;
            try
            {
                APIRequestInPogress = true;
                customerName.RegistrationLicences = await JiwaAPI.GetAsync(customerLicencesGETRequest, WebPortalUserSessionStateContainer?.WebPortalUserSession?.Id, null);
                customerName.LicencesHaveBeenRead = true;                                
            }
            catch (ServiceStack.WebServiceException webServiceException)
            {
                if (webServiceException.StatusCode == 401)
                {
                    // We are either not authenticated, or our token we have expired, go log on - but first clear any session info as it's no good no more.
                    WebPortalUserSessionStateContainer.SetWebPortalUserSession(null);
                    NavigationManager.NavigateTo($"User/SignIn?returnUrl={NavigationManager.Uri}");
                }
                else
                {
                    statusMessage = webServiceException.ErrorMessage;
                }
            }
            catch (Exception ex)
            {
                statusMessage = ex.Message;
            }
            finally
            {
                APIRequestInPogress = oldAPIRequestInPogress;
            }
        }

        StateHasChanged();
    }

    public async void DownloadLicence(RegistrationLicences licence)
    {
        bool oldAPIRequestInPogress = APIRequestInPogress;
        try
        {
            APIRequestInPogress = true;
            LicenceGETRequest licenceGETRequest = new LicenceGETRequest() { LicenceID = licence.RecID, AsAttachment = false };            
            byte[] xmlLicence = await JiwaAPI.GetAsync<byte[]>(licenceGETRequest, WebPortalUserSessionStateContainer.WebPortalUserSession.Id, null);
            var fileStream = new MemoryStream(xmlLicence);
            string fileName = $"{licence.RegistrationName}_{licence.ResourceName}_{licence.Version}_{licence.RecID}.xml";

            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (ServiceStack.WebServiceException webServiceException)
        {
            if (webServiceException.StatusCode == 401)
            {
                // We are either not authenticated, or our token we have expired, go log on - but first clear any session info as it's no good no more.
                WebPortalUserSessionStateContainer.SetWebPortalUserSession(null);
                NavigationManager.NavigateTo($"User/SignIn?returnUrl={NavigationManager.Uri}");
            }
            else
            {
                statusMessage = webServiceException.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            statusMessage = ex.Message;
        }
        finally
        {
            APIRequestInPogress = oldAPIRequestInPogress;
        }
    }
}