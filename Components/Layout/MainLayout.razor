@attribute [type: RenderModeInteractiveServer]
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ServiceStack;
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IColourModeServices ColourModeService
@inject BrowserService BrowserService
@inject NavigationManager NavigationManager
@inject WebPortalUserSessionStateContainer WebPortalUserSessionStateContainer

<script>
    function IsDarkMode() {
        let matched = window.matchMedia('(prefers-color-scheme: dark)').matches;

        if (matched)
            return true;
        else
            return false;
    }

    function BootstrapVersion() {
        // TODO: There does not seem to be any reliable way to get the Bootstrap version other than
        // acutally reading the .css or .js files and parsing that to extract it from a comment.
        return "5.3.3"
    }

    function DateToLocaleString(year, month, day) { 
        d = new Date();
        d.setUTCFullYear(year);
        d.setUTCMonth(month);
        d.setUTCDate(day);

        return d.toLocaleDateString();
    }
</script>
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>        
    <main>
        <div class="@HeaderAttribute()">            
            @* we use a section outlet to host the component to display user info (debtor name, email address) because
                that's the only way for another page to communicate back to this one that it needs to update when the
                user signs in or out.
            *@
            <SectionOutlet SectionName="top-bar-signin-info" />

            <div class="text-end">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="darkModeToggle" @bind="IsDarkColourMode">
                    @if (IsDarkColourMode)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-moon-stars" viewBox="0 0 20 20">
                            <path d="M6 .278a.77.77 0 0 1 .08.858 7.2 7.2 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277q.792-.001 1.533-.16a.79.79 0 0 1 .81.316.73.73 0 0 1-.031.893A8.35 8.35 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.75.75 0 0 1 6 .278M4.858 1.311A7.27 7.27 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.32 7.32 0 0 0 5.205-2.162q-.506.063-1.029.063c-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286" />
                            <path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.73 1.73 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.73 1.73 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.73 1.73 0 0 0 1.097-1.097zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.16 1.16 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.16 1.16 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732z" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-brightness-high" viewBox="0 0 20 20">
                            <path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6m0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0m9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708" />
                        </svg>
                    }                
                </div>      
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<SectionContent SectionName="top-bar-signin-info">
    <SignedInUserInfo></SignedInUserInfo>
</SectionContent>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code 
{
    private JiwaFinancials.Jiwa.JiwaServiceModel.WebPortalUserSession? _WebPortalUserSession = null;

    public bool IsDarkColourMode
    {
        get
        {
            return ColourModeService.ColourMode == "dark";
        }
        set
        {
            ColourModeService.ColourMode = value ? "dark" : "light";
            Task setColourModeTask = Task.Run(async () =>
                    {
                        await ProtectedLocalStore.SetAsync("ColourMode", ColourModeService.ColourMode);
                    });
            StateHasChanged();
            NavigationManager.Refresh();
        }
    }

    public string HeaderAttribute()
    {
        if (IsDarkColourMode)
        {
            return "top-row bg-dark text-primary";
        }
        else
        {
            return "top-row bg-light text-primary";
        }
    }

    protected override async Task OnInitializedAsync()
    {        
        await base.OnInitializedAsync();

        // Set the colour mode
        string currentColourMode = ColourModeService.ColourMode;
        string newColourMode = null;
        ProtectedBrowserStorageResult<string> colourModeResult = await ProtectedLocalStore.GetAsync<string>("ColourMode");
        if (colourModeResult.Value != null)
        {
            newColourMode = colourModeResult.Value;
            ColourModeService.ColourMode = colourModeResult.Value;
        }
        else
        {
            // get the colour mode from the browser preference
            bool isdarkTheme = await BrowserService.IsDarkMode();
            newColourMode = isdarkTheme ? "dark" : "light";
        }

        Config.BootStrapVersion = await BrowserService.BootstrapVersion();

        if (colourModeResult.Value != currentColourMode)
        {
            // if the colour mode now is different to what we started with (the default), then refresh the page to impact the change in App.razor which uses the theme colour
            ColourModeService.ColourMode = newColourMode;
            NavigationManager.Refresh();
        }

        // Work out the date format from the browser and store it - we use this to display dates everywhere
        await BrowserService.GetUserLocalDateFormat();        


        // Setting the protected local store of the WebPortalUserSessionStateContainer will cause a re-authenticate if there is a stored ss-id
        await WebPortalUserSessionStateContainer.SetProtectedLocalStore(ProtectedLocalStore);        
    }
}